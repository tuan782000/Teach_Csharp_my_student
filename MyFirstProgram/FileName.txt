 C# array of objects 🏬


using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args) {


            Car[] garage = { new Car("Mustang"), new Car("Corvette"), new Car("Lambo") }; 
            //tạo ra một mảng garage chứa 3 đối tượng Car với các mô hình tương ứng là "Mustang", "Corvette", và "Lambo".

            foreach (Car car in garage)
            {
                Console.WriteLine(car.model); // Dòng Console.WriteLine(car.model); in ra màn hình thông tin về mô hình xe (model) của đối tượng Car hiện tại.
            }
            // Vòng lặp foreach được sử dụng để duyệt qua từng phần tử trong mảng garage. Đầu tiên, phần tử đầu tiên trong mảng được gán cho biến car.
            
            //Vòng lặp tiếp tục với phần tử tiếp theo trong mảng, và lại thực hiện câu lệnh in thông tin mô hình xe. Quá trình này được lặp lại cho tất cả các phần tử trong mảng garage.
            
            //Sau khi vòng lặp foreach kết thúc, chương trình đến dòng Console.ReadKey();. Chương trình sẽ dừng lại ở đây và chờ người dùng nhấn một phím bất kỳ trên bàn phím.

            Console.ReadKey(); //
            
            //Khi người dùng nhấn một phím, chương trình tiếp tục thực thi và kết thúc.
        }   
    }
    class Car 
    {
        public String model;

        public Car(String model)
        {
            this.model = model;
        }
    }
}


======================================================================================================================

C# objects as arguments 🧳

using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args) {

            Car car1 = new Car("Mustang","red");

            Car car2 = Copy(car1);

            Console.WriteLine(car2.color + " " + car2.model);

            Console.ReadKey();
        }

        public static void ChangeColor(Car car, String color)
        {
            car.color = color;
        }

        public static Car Copy(Car car)
        {
            return new Car(car.model, car.color);
        }
    }
    class Car 
    {
        public String model;
        public String color;

        public Car(String model, String color)
        {
            this.model = model;
            this.color = color;
        }
    }
}



==================================================================================

using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args) {

            //method overriding = provides a new version of a method inherited from a parent class
            //                    inherited method must be: abstract, virtual, or already overriden
            //                    Used with ToString(), polymorphism 

            // Phương thức ghi đè = cung cấp phiên bản mới của phương thức được kế thừa từ lớp cha
            //                      Phương thức được kế thừa phải là: trừu tượng, ảo hoặc đã được ghi đè
            //                      Được sử dụng với ToString (), đa hình

            // tạo ra dog kế thừa Dog tương tự cat
            Dog dog = new Dog();
            Cat cat = new Cat();

            // sử dụng phưng thức speak();
            dog.Speak();
            cat.Speak();

            Console.ReadKey();
        }
    }
    // tạo đối tượng animal
    class Animal 
    {
        // ảo: virtual phương thức speak()
        public virtual void Speak()
        {
            Console.WriteLine("The animal goes *brrr*");
        }
    }
    //Dog kế thừa animal
    class Dog : Animal
    {
        // override: ghi đè, phương thức speak
        public override void Speak()
        {
            Console.WriteLine("The dog goes *woof*");
        }
    }
    // Cat kế thừa animal
    class Cat : Animal
    {
        public override void Speak()
        {
            Console.WriteLine("The meow goes *meow*");
        }
    }
}

==============================================================================================================
ToString method 💭

using System;

namespace MyFirstProgram
{
    class Program 
    {
        static void Main(string[] args)
        {

            //ToString() = converts an object to its string representation so that it is suitable for display

            //ToString() = chuyển đổi một đối tượng thành biểu diễn chuỗi của nó để nó phù hợp để hiển thị

            // chuyển đổi đối tượng thành chuỗi

            Car car = new Car("Chevy", "Corvette", 2022, "blue");

            Console.WriteLine(car.ToString());

            Console.ReadKey();
        }
    }
    class Car
    {
        String make;
        String model;
        int year;
        String color;

        public Car(String make, String model, int year, String color)
        {
            this.make = make;
            this.model = model;
            this.year = year;
            this.color = color;
        }
        public override string ToString()
        {       
            return "This is a " + make + " " + model;
        }
    }
}


=================================================================================================================
using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args) {

            // polymorphism = Greek word that means to "have many forms"
            //                Objects can be identified by more than one type
            //                Ex. A Dog is also: Canine, Animal, Organism


            // polymorphism = từ tiếng Hy Lạp có nghĩa là "có nhiều hình thức"
            //                Các đối tượng có thể được xác định bởi nhiều loại
            //                Ví dụ. Một con Chó cũng là: Chó sói, Động vật, Sinh vật


            Car car = new Car();
            Bicycle bicycle = new Bicycle();
            Boat boat = new Boat();

            //Định nghĩa mảng vehicles bằng Vehicle [] nạp vào nó cái đối tượng
            Vehicle[] vehicles = {car, bicycle, boat};

            // dùng vòng lặp để lặp ra vehicle
            foreach (Vehicle vehicle in vehicles)
            {
                vehicle.Go();
            }
           
            Console.ReadKey();
        }
    }
    // định nghĩa ra Vehicle, trong nó có phương thức Go
    class Vehicle
    {
        public virtual void Go()
        {

        }
    }
    // Car kế thừa Vehicle và ghi đè lại phương thức Go cho riêng mình
    class Car: Vehicle
    {
        public override void Go()
        {
            Console.WriteLine("The car is moving!");
        }
    }
    // Bicycle kế thừa Vehicle và ghi đè lại phương thức Go cho riêng mình
    class Bicycle : Vehicle
    {
        public override void Go()
        {
            Console.WriteLine("The bicycle is moving!");
        }
    }
    // Boat kế thừa Vehicle và ghi đè lại phương thức Go cho riêng mình
    class Boat : Vehicle
    {
        public override void Go()
        {
            Console.WriteLine("The boat is moving!");
        }
    }
}


==========================================================================================================
interfaces 🐟


using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            // interface = defines a "contract" that all the classes inheriting from should follow

            //             An interface declares "what a class should have"
            //             An inheriting class defines "how it should do it"

            //             benefits = security + multiple inheritance + "plug-and-play"

            
            // interface = định nghĩa một "hợp đồng" mà tất cả các lớp kế thừa từ đó phải tuân theo

            //             Một giao diện khai báo "lớp nên có gì"
            //             Một lớp kế thừa định nghĩa "cách thức thực hiện"
            //             lợi ích = bảo mật + thừa kế nhiều + "cắm và chạy"


            // Đầu tiên, trong phương thức Main, ba đối tượng rabbit, hawk và fish được khởi tạo từ các lớp Rabbit, Hawk và Fish tương ứng.
            Rabbit rabbit = new Rabbit();
            Hawk hawk = new Hawk();
            Fish fish = new Fish();


            //Các đối tượng rabbit, hawk và fish được sử dụng để gọi các phương thức Flee và Hunt.
            rabbit.Flee();
            hawk.Hunt();
            fish.Flee();
            fish.Hunt();

            // -- Cuối cùng Khi chạy, các phương thức Flee và Hunt tương ứng với từng đối tượng sẽ được gọi 
            // và thông điệp tương ứng sẽ được in ra màn hình console.--

            Console.ReadKey();
        }

        //Các phương thức Flee và Hunt được định nghĩa trong các interface IPrey và IPredator.

        //Interface IPrey chỉ định một phương thức Flee, mô tả hành động "trốn" của con mồi.
        interface IPrey
        {
            void Flee();
        }
        //Interface IPredator chỉ định một phương thức Hunt, mô tả hành động "săn mồi" của kẻ săn đuổi.
        interface IPredator
        {
            void Hunt();
        }

        //Lớp Rabbit kế thừa từ interface IPrey và triển khai phương thức Flee. 
        //Điều này có nghĩa là lớp Rabbit tuân theo "hợp đồng" của interface IPrey và cung cấp cách thức thực hiện hành động "trốn".
        class Rabbit : IPrey
        {
            public void Flee()
            {
                Console.WriteLine("The rabbit runs away!");
            }
        }

        //Lớp Hawk kế thừa từ interface IPredator và triển khai phương thức Hunt. 
        //Điều này có nghĩa là lớp Hawk tuân theo "hợp đồng" của interface IPredator và cung cấp cách thức thực hiện hành động "săn".
        class Hawk : IPredator
        {
            public void Hunt()
            {
                Console.WriteLine("The hawk is searching for food!");
            }
        }

        //Lớp Fish kế thừa từ cả IPrey và IPredator và triển khai cả hai phương thức Flee và Hunt. 
        //Điều này có nghĩa là lớp Fish tuân theo cả "hợp đồng" của IPrey và IPredator, 
        //cung cấp cách thức thực hiện cả hành động "trốn" và "săn".
        class Fish : IPrey, IPredator
        {
            public void Flee()
            {
                Console.WriteLine("The fish swims away!");
            }
            public void Hunt()
            {
                Console.WriteLine("The fish is searching for smaller fish!");
            }
        } 
    }  
}


// Lists 📃


using System;
using System.Collections.Generic;

namespace MyFirstProgram
{
    class Program 
    {
        static void Main(string[] args)
        {

            // List = data structure that represents a list of objects that can be accessed by index.
            //        Similar to array, but can dynamically increase/decrease in size 
            //        using System.Collections.Generic;

            // Danh sách = cấu trúc dữ liệu đại diện cho một danh sách các đối tượng có thể được truy cập bằng chỉ mục.
            //        Tương tự như mảng, nhưng có thể thay đổi kích thước động.
            //        sử dụng System.Collections.Generic;

            List<String> food = new List<String>();

            food.Add("pizza"); // thêm vào trong mảng || vị trí thêm cuối mảng
            food.Add("hamburger");  // thêm vào trong mảng || vị trí thêm cuối mảng
            food.Add("hotdog");  // thêm vào trong mảng || vị trí thêm cuối mảng
            food.Add("fries");  // thêm vào trong mảng || vị trí thêm cuối mảng

            //Console.WriteLine(food[0]); // Hiển thị phần tử trong mảng dựa vào tham số truyền vào
            //Console.WriteLine(food[1]);
            //Console.WriteLine(food[2]);
            //Console.WriteLine(food[3]);

            //food.Remove("fries"); //xóa phần tử chỉ định
            //food.Insert(0, "sushi"); // thêm phần tử vào bằng cách truyền 2 tham số thứ nhất vị trí index, thứ hai là nội dung
            //Console.WriteLine(food.Count); // đếm số lượng trong mảng food
            //Console.WriteLine(food.IndexOf("pizza")); // tìm vị trí của phần tử
            //Console.WriteLine(food.LastIndexOf("fries")); // tìm vị trí cuối cùng của phần tử đó đứng, thí dụ phần tử đó ở 2 vị trí thì tìm tới vị trí cuối
            //Console.WriteLine(food.Contains("pizza")); // xem thử phần tử này có tồn tại trong mảng không. nếu có trả về true không thì false
            //food.Sort(); // sắp xếp theo ký tự a -> z
            //food.Reverse(); // đảo ngược mảng hiện tại đầu xuống đuôi và đuôi lên đầu
            //food.Clear(); // xóa hết các phần tử có trong mảng
            //String[] foodArray = food.ToArray(); //  gán cho foodArray làm food.ToArray() sau đó gán vào vòng lặp dùng vẫn được

            foreach (String item in food)
            {
                Console.WriteLine(item);
            }

            Console.ReadKey();
        }
    }
}

List of objects 🦸‍♂️


using System;
using System.Collections.Generic;

namespace MyFirstProgram
{
    class Program 
    {
        static void Main(string[] args)
        {
            List<Player> players = new List<Player>();

            players.Add(new Player("Chad"));
            players.Add(new Player("Steve"));
            players.Add(new Player("Karen"));

            foreach (Player player in players)
            {
                Console.WriteLine(player);
            }

            Console.ReadKey();
        }
    }

    class Player
    {
        public String username;

        public Player(String username)
        {
            this.username = username;
        }
        public override string ToString()
        {
            return username;
        }
    }
}




using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            //getters & setters = add security to fields by encapsulation
            //                    They're accessors found within properties

            // properties = combine aspects of both fields and methods (share name with a field)
            // get accessor = used to return the property value
            // set accessor = used to assign a new value
            // value keyword = defines the value being assigned by the set (parameter)


            // getters và setters = thêm bảo mật cho các trường bằng cách đóng gói
            //                    Chúng là các bộ điều hợp được tìm thấy trong các thuộc tính

            // thuộc tính = kết hợp các khía cạnh của cả trường và phương thức (chia sẻ tên với một trường)
            // get accessor = được sử dụng để trả về giá trị thuộc tính
            // set accessor = được sử dụng để gán giá trị mới
            // từ khóa value = xác định giá trị được gán bởi set (tham số)
            

            /*
            
            getters và setters = là các phương thức được sử dụng để truy cập và thay đổi giá trị của một trường.
            thêm bảo mật cho các trường bằng cách đóng gói là cách bảo vệ các trường khỏi bị truy cập trực tiếp, điều này có thể giúp ngăn chặn lỗi và bảo vệ dữ liệu.
            Chúng là các bộ điều hợp được tìm thấy trong các thuộc tính là cách nói rằng getters và setters là một phần của thuộc tính.
            thuộc tính = kết hợp các khía cạnh của cả trường và phương thức (chia sẻ tên với một trường) là cách nói rằng thuộc tính là một loại trường đặc biệt có các phương thức getter và setter.
            get accessor = được sử dụng để trả về giá trị thuộc tính là cách nói rằng getter là phương thức được sử dụng để lấy giá trị của thuộc tính.
            set accessor = được sử dụng để gán giá trị mới là cách nói rằng setter là phương thức được sử dụng để đặt giá trị mới cho thuộc tính.
            từ khóa value = xác định giá trị được gán bởi set (tham số) là cách nói rằng từ khóa value được sử dụng trong setter để xác định giá trị mới được gán cho thuộc tính.
            
            */



            Car car = new Car(400);

            car.Speed = 1000000000;

            Console.WriteLine(car.Speed);

            Console.ReadKey();
        }   
    }
    class Car
    {
        private int speed;

        public Car(int speed)
        {
            Speed = speed;
        }

        public int Speed
        {
            get { return speed; } //read
            set                   // writeable
            {
                if (value > 500)
                {
                    speed = 500;
                }
                else
                {
                    speed = value;
                }
            }
        }

    }
}


auto implemented properties 🔐


using System;

namespace MyFirstProgram
{
    class Program 
    {
        static void Main(string[] args)
        {
            // auto-Implemented property =  shortcut when no additional logic is required in the property
            //                                you do not have to define a field for a property,
            //                                you only have to write get; and/or set; inside the property                             

            // Thuộc tính được tự triển khai = Viết tắt khi không cần logic bổ sung trong thuộc tính
            //                                bạn không cần phải định nghĩa một trường cho thuộc tính,
            //                                bạn chỉ cần viết get; và/hoặc set; bên trong thuộc tính


            /*
            Thuộc tính được tự triển khai là một loại thuộc tính đặc biệt trong đó không cần định nghĩa một trường riêng biệt cho thuộc tính.
            lối tắt khi không cần logic bổ sung trong thuộc tính là cách nói rằng auto-implemented properties là một cách viết ngắn gọn cho các thuộc tính mà không cần bất kỳ logic bổ sung nào trong các phương thức getter và setter.
            bạn không cần phải định nghĩa một trường cho thuộc tính là cách nói rằng auto-implemented properties tự động tạo một trường ẩn cho thuộc tính.
            bạn chỉ cần viết get; và/hoặc set; bên trong thuộc tính là cách nói rằng các phương thức getter và setter cho auto-implemented properties được tự động tạo và không cần phải viết thêm mã.
            */

            Car car = new Car("Porsche");

            Console.WriteLine(car.Model);

            Console.ReadKey();
        }
    }

    class Car
    {
        public String Model {get; set;} //get {return model;}, set {model = value;}

        public Car(String model)
        {
            this.Model = model;
        }
    }
}




---enums---- 

using System;

namespace MyFirstProgram
{
    class Program
    {

        static void Main(string[] args)
        {
            // enums = special "class" that contains a set of named integer constants.
            //         Use enums when you have values that you know will not change,
            //         To get the integer value from an item, you must explicitly convert to an int

            //         name = integer

            // enums = class đặc biệt "class" chứa một tập hợp các hằng số số nguyên có tên.
            //         Sử dụng enums khi bạn có các giá trị mà bạn biết sẽ không thay đổi,
            //         Để lấy giá trị số nguyên từ một mục, bạn phải chuyển đổi rõ ràng thành một int




            //Console.WriteLine(Planets.Mercury + " is planet #" + (int)Planets.Mercury);
            //Console.WriteLine(Planets.Pluto + " is planet #" + (int)Planets.Pluto);

            String name = PlanetRadius.Earth.ToString(); // gán giá trị PlanetRadius.Earth sau khi chuyển hóa thành cuỗi vào name
            int radius = (int)PlanetRadius.Earth; // gán số của PlanetRadius.Earth vào radius
            double volume = Volume(PlanetRadius.Earth); // sử dụng function Volume (truyền đối số PlanetRadius.Earth) 

            Console.WriteLine("planet: " + name); // sử dụng lại các biến gán giá trị
            Console.WriteLine("radius: " + radius +"km");  // sử dụng lại các biến gán giá trị
            Console.WriteLine("volume: " + volume +"km^3");

            Console.ReadKey();
        }
        // đây là nơi xử lý cái đối số truyền vào, sau khi hoành thành xong hàm trả ngược về Volume và nơi gọi Volume này sẽ nhận được giá trị đó
        //ở đây truyền vào 1 tham số, cái này là enum PlanetRadius, cái này tham số chính radius
        public static double Volume(PlanetRadius radius)
        {
                            //Thể tích của hình cầu = (4/3) x Pi x R^3
            double volume = (4.0 / 3.0) * Math.PI * Math.Pow((int)radius, 3); //Hàm Pow trả về số lũy thừa của số cơ số với số mũ. (int)radius là số và 3 là số mũ
            return volume;
        }
    }
    enum Planets
    {
        Mercury = 1, 
        Venus = 2, 
        Earth = 3, 
        Mars = 4, 
        Jupiter = 5, 
        Saturn = 6, 
        Uranus = 7, 
        Neptune = 8, 
        Pluto = 9
    }

    enum PlanetRadius
    {
        Mercury = 2439,
        Venus = 6051,
        Earth = 6371,
        Mars = 3389,
        Jupiter = 69911,
        Saturn = 58232,
        Uranus = 25362,
        Neptune = 24622,
        Pluto = 1188
    }
}



//generics ⁉️


using System;

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            // generic =  "not specific to a particular data type"
            //            add <T> to: classes, methods, fields, etc.
            //            allows for code reusability for different data types

            // generic =  "không cụ thể cho một kiểu dữ liệu cụ thể"
            //             thêm <T> vào: lớp, phương thức, trường, v.v.
            //            cho phép tái sử dụng mã cho các kiểu dữ liệu khác nhau

            Generic là một tính năng của C# cho phép bạn viết mã không cụ thể cho một kiểu dữ liệu cụ thể.
            T là một placeholder cho một kiểu dữ liệu.
            Thêm <T> vào: lớp, phương thức, trường, v.v. là cách nói rằng bạn có thể sử dụng generics với các lớp, phương thức, trường, v.v.
            Cho phép tái sử dụng mã cho các kiểu dữ liệu khác nhau là cách nói rằng generics cho phép bạn tái sử dụng mã cho các kiểu dữ liệu khác nhau.

            int[] intArray = { 1, 2, 3 };
            double[] doubleArray = { 1.0, 2.0, 3.0 };
            String[] stringArray = { "1", "2", "3" };

            displayElements(intArray);
            displayElements(doubleArray);
            displayElements(stringArray);

            Console.ReadKey();
        }     
        // Tái sử dụng code, thay vì 3 cái hàm nhưng tôi ưu làm 1 hàm
        // Thing này có thể đổi thành T
        // Thing hoặc T đại diện cho toàn bộ int, double, String. array đại diện intArray, doubleArray, stringArray
        public static void displayElements<Thing>(Thing[] array)
        {
            // Thing hoặc T đại diện cho toàn bộ int, double, String.|| item là giá trị của mảng || array đại diện intArray, doubleArray, stringArray
            foreach (Thing item in array)
            {
                // mỗi item được lặp ra và kèm thêm " "
                Console.Write(item + " ");
            }
            Console.WriteLine();
        }
    }
}


multithreading 🧶 Đa luồng


using System;
using System.Threading;
// C# được sử dụng để nhập không gian tên System.Threading
// Đa luồng là một kỹ thuật cho phép một chương trình chạy nhiều tác vụ cùng một lúc. 
// Điều này có thể cải thiện hiệu suất của chương trình bằng cách cho phép nhiều tác vụ chạy đồng thời, 
// thay vì phải đợi từng tác vụ hoàn thành trước khi bắt đầu tác vụ tiếp theo.

//Không gian tên System.Threading cung cấp các lớp và phương thức cho phép bạn tạo và quản lý các luồng, đồng thời đồng bộ hóa các luồng với nhau.

namespace MyFirstProgram
{
    class Program
    {
        static void Main(string[] args)
        {
            // thread = an execution path of a program
            //          We can use multiple threads to perform,
            //          different tasks of our program at the same time.
            //          Current thread running is "main" thread
            //          using System.Threading;


            // Luồng = một đường dẫn thực thi của chương trình
            //          Chúng ta có thể sử dụng nhiều luồng để thực hiện,
            //          các tác vụ khác nhau của chương trình của chúng ta cùng một lúc.
            //          Luồng hiện đang chạy là "luồng chính"
            //          sử dụng System.Threading;

            Luồng là một đơn vị thực thi nhỏ của một chương trình. Mỗi luồng có một ngăn xếp riêng, bộ chỉ mục lệnh riêng và bộ nhớ cục bộ riêng.
            Chúng ta có thể sử dụng nhiều luồng để thực hiện, các tác vụ khác nhau của chương trình của chúng ta cùng một lúc là cách nói rằng các luồng có thể được sử dụng để thực hiện các tác vụ khác nhau cùng một lúc, điều này có thể giúp tăng tốc độ của chương trình.
            Luồng hiện đang chạy là "luồng chính" là cách nói rằng luồng chính là luồng đầu tiên được tạo ra khi một chương trình bắt đầu.
            sử dụng System.Threading; là cách nói rằng mã này sử dụng không gian tên System.Threading, có chứa các lớp và API cho phép bạn tạo và quản lý các luồng.

            //Thread lớp: Lớp này đại diện cho một luồng.
            Thread mainThread = Thread.CurrentThread;
            mainThread.Name = "Main Thread";
            //Console.WriteLine(mainThread.Name);

            Thread thread1 = new Thread(() => CountDown("Timer #1"));
            Thread thread2 = new Thread(() => CountUp("Timer #2"));


            //ThreadStart delegate: Delegate này được sử dụng để chỉ định một hàm sẽ được chạy trên một luồng.
            // Ở đây có 2 luồng 1 và 2
            thread1.Start();
            thread2.Start();

            Console.WriteLine(mainThread.Name + " is complete!");

            Console.ReadKey();
        }  
        public static void CountDown(String name)
        {
            for (int i = 10; i >= 0; i--)
            {
                Console.WriteLine("Timer #1 : " + i + " seconds");
                //Sleep phương thức: Phương thức này được sử dụng để tạm dừng một luồng trong một khoảng thời gian nhất định.
                Thread.Sleep(1000);
            }
            Console.WriteLine("Timer #1 is complete!");
        }
        public static void CountUp(String name)
        {
            for (int i = 0; i <= 10; i++)
            {
                Console.WriteLine("Timer #2 : " + i + " seconds");

                //Sleep phương thức: Phương thức này được sử dụng để tạm dừng một luồng trong một khoảng thời gian nhất định.
                Thread.Sleep(1000);
            }
            Console.WriteLine("Timer #2 is complete!");
        }
    }
}



/*

using System.Threading; là một câu lệnh using trong C# được sử dụng để nhập không gian tên System.Threading. 
Không gian tên này chứa các lớp và phương thức liên quan đến đa luồng.

Đa luồng là một kỹ thuật cho phép một chương trình chạy nhiều tác vụ cùng một lúc. 
Điều này có thể cải thiện hiệu suất của chương trình bằng cách cho phép nhiều tác vụ chạy đồng thời, 
thay vì phải đợi từng tác vụ hoàn thành trước khi bắt đầu tác vụ tiếp theo.

Không gian tên System.Threading cung cấp các lớp và phương thức cho phép bạn tạo và quản lý các luồng, đồng thời đồng bộ hóa các luồng với nhau.

Một số lớp và phương thức phổ biến trong không gian tên System.Threading bao gồm:

Thread lớp: Lớp này đại diện cho một luồng.
ThreadStart delegate: Delegate này được sử dụng để chỉ định một hàm sẽ được chạy trên một luồng.
Join phương thức: Phương thức này được sử dụng để đợi một luồng hoàn thành.
Sleep phương thức: Phương thức này được sử dụng để tạm dừng một luồng trong một khoảng thời gian nhất định.
Mutex lớp: Lớp này được sử dụng để đồng bộ hóa các luồng truy cập tài nguyên chung.
Semaphore lớp: Lớp này được sử dụng để giới hạn số lượng luồng có thể truy cập tài nguyên chung cùng một lúc.
Để sử dụng không gian tên System.Threading, bạn cần nhập nó bằng cách sử dụng câu lệnh using System.Threading;. 
Sau khi không gian tên được nhập, bạn có thể sử dụng các lớp và phương thức trong không gian tên trong mã của mình.

*/